name: load-dotenv-vault
description: 'Loads a dotenv-vault environment from .env.vault into the GitHub Actions env'
branding:
  icon: 'lock'
  color: 'green'
inputs:
  dotenv-key:
    description: 'The dotenv-vault encryption key'
    required: true
  mode:
    description: 'The suffix to use on the .env file generated from dotenv-vault decrypt (e.g., ci results in .env.ci)'
    required: false
    default: 'ci'
  load-mode:
    description: 'Sets whether the program should fail when the .env file is not present (strict) or continue (skip)'
    required: false
    default: 'skip'
  node-version:
    description: 'The version of Node.js to use'
    required: false
    default: '20'
  node-version-file:
    description: 'The path to a file containing the version of Node.js to use'
    required: false
  architecture:
    description: 'The architecture of Node.js to use (x86 or x64)'
    required: false
  check-latest:
    description: 'Set to true to check for the latest available version of Node.js'
    required: false
  registry-url:
    description: 'The base URL of the npm registry'
    required: false
  scope:
    description: 'The scope of the npm registry'
    required: false
  token:
    description: 'The token to use for authentication with the npm registry'
    required: false
  cache:
    description: 'The path to the npm cache directory'
    required: false
  cache-dependency-path:
    description: 'The path to the dependency file (e.g., package-lock.json)'
    required: false
  always-auth:
    description: 'Set always-auth option in npmrc file'
    required: false
runs:
  using: 'composite'
  steps:
      # Ensure Required Files Exist
      - name: Verify Required Files Exist
        run: |
          if [ ! -f .env.vault ]; then
            echo "::error:: .env.vault file is missing! Ensure it is committed or generated."
            exit 1
          fi
          if [ ! -f package-lock.json ]; then
            echo "::error:: package-lock.json is missing! Ensure it is committed."
            exit 1
          fi
        shell: bash

      # Cache dotenv file (only if an exact match exists)
      - name: Cache dotenv files
        id: cache-dotenv
        uses: actions/cache@v3
        with:
          path: .env
          key: ${{ runner.os }}-dotenv-${{ hashFiles('.env.vault') || 'no-vault' }}

      # Decrypt dotenv vault ONLY if the cache was not restored
      - name: Decrypt dotenv vault if cache is missing
        if: steps.cache-dotenv.outputs.cache-hit != 'true'
        uses: BluMintInc/decrypt-dotenv-vault@v1.0.1
        with:
          dotenv-key: ${{ inputs.dotenv-key }}
          env-file: .env

      # 5Cache node_modules (only restore exact match)
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') || 'no-lock' }}

      # Install Dependencies ONLY if cache was not restored
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      # Load .env file into GitHub Actions environment
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          mode: ci
          load-mode: skip
